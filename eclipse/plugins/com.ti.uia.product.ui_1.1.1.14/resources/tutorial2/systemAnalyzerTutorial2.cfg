/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
 
/*
 *  ======== systemAnalyzerTutorial2.cfg ========
 *  This file specifies how the XDC modules used by the
 *  System Analyzer Tutorial 2 project are to be configured.  
 *
 * See http://processors.wiki.ti.com/index.php/McsaTutorial2 for more info.
 */
 
/* ================ XDC Configuration ================ */
/* 
 *  The SysStd System provider is a good one to use for debugging 
 *  but does not have the best performance. Use xdc.runtime.SysMin
 *  for better performance.
 */
var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

/* The xdc.runtime.Log module provides APIs to log prioritized events (errors, 
 * warnings, and info) as well as generic APIs to log events (Log_writeN,
 * Log_printN) 
 */
var Log = xdc.useModule('xdc.runtime.Log');

/* The following modules from the ti.uia.events package contain predefined  
 * events that can be logged using the Log_write APIs
 */
var UIAEvt = xdc.useModule('ti.uia.events.UIAEvt');

/* ================ Logger configuration ================ */
/* 
 *  1. Enables events in main and non-XDC modules
 *     and assigns them a logger (size 32768 bytes) that uploads
 *     events while the target is running using Silicon Real-time mode.
 *     (For targets that do not support silicon real-time mode,
 *     use ti.uia.runtime.LoggerProbePoint to monitor the program
 *     while it runs using probe-points (intrusive))
 *  
 *  If you are using SYS/BIOS, please refer to the ti.uia.sysbios.LoggingSetup 
 *  module for a simpler way to configure loggers and enable SYS/BIOS
 *  real-time software instrumentation features.  (This is covered in 
 *  a separate System Analyzer Tutorial).  
 *  
 */ 
var Logger = xdc.useModule('ti.uia.runtime.LoggerCircBuf'); 
var loggerParams = new Logger.Params();
loggerParams.transferBufSize = 32768;
logger = Logger.create(loggerParams);
logger.instance.name = "Main logger";


/* The Diags module provides flags that can be used to control which
 * categories of events are uploaded.  Setting a category to Diags.ALWAYS_OFF
 * will remove any overhead associated with the event logging from the 
 * compiled code if the whole_program compile option (-pm) is used.
 */
var Diags = xdc.useModule('xdc.runtime.Diags');

/* The Main module is used to configure how events logged from non-XDC
 * C and C++ code are handled.  Configure it to use the logger instance
 * created above to log events, and enable all categories of events,
 * configuring them so that they can be dynamically enabled or disabled
 * using the Diags_setMask API. (see the xdc.runtime.Diags module for more 
 * information).
 */
var Main = xdc.useModule('xdc.runtime.Main');
Main.common$.logger = logger;
Main.common$.diags_STATUS = Diags.ALWAYS_ON;
Main.common$.diags_ANALYSIS = Diags.RUNTIME_ON;
Main.common$.diags_INFO = Diags.RUNTIME_ON;
Main.common$.diags_USER1 = Diags.RUNTIME_ON;
Main.common$.diags_USER2 = Diags.RUNTIME_ON;
Main.common$.diags_USER3 = Diags.RUNTIME_ON;
Main.common$.diags_USER4 = Diags.RUNTIME_ON;
Main.common$.diags_USER5 = Diags.RUNTIME_ON;
Main.common$.diags_USER6 = Diags.RUNTIME_ON;

/*
 *  @(#) ti.uia.examples.tutorial2; 1, 0, 0, 0,1; 7-13-2012 11:16:57; /db/vtree/library/trees/uia/uia-d14/src/ xlibrary

 */

